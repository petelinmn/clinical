{"version":3,"sources":["dataFetchService.js","components/Grid.js","components/Search.js","components/Card.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","FIELD_SETS","BRIEF_SET","ALL_FIELDS","mapDataToFields","data","fieldSet","map","item","index","field","fields","name","caption","value","fetchData","searchString","maxList","Promise","resolve","reject","df","filter","_","length","includes","reduce","acc","curItem","fetch","then","response","json","result","catch","error","Grid","params","useParams","useState","setData","useEffect","isCancelled","fetchListData","text","className","i","npi","providerType","gender","addrPractice","country","to","Search","setSearchString","history","useHistory","onChange","e","target","onKeyDown","key","push","disabled","onClick","Card","App","renderMainPage","path","onLoad","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a23df21.chunk.js","sourcesContent":["import fields from './fields.json'\n\nconst baseUrl = 'https://clinicaltables.nlm.nih.gov/api/npi_idv/v3/search';\nconst FIELD_SETS = {\n  BRIEF_SET: [0,1,2,3,4,39],\n  ALL_FIELDS: []\n}\n\nconst mapDataToFields = (data, fieldSet = FIELD_SETS.BRIEF_SET) => data.map((item, index) => {\n  const field = fieldSet === FIELD_SETS.BRIEF_SET\n    ? fields[fieldSet[index]]\n    : fields[index];\n\n  return {\n    name: field.name,\n    caption: field.caption,\n    value: item\n  };\n});\n\nconst fetchData = (searchString, fieldSet, maxList = 1) => new Promise((resolve, reject) => {\n  const df = `&df=${fields\n    .filter((_, index) => fieldSet.length === 0 || fieldSet.includes(index))\n    .map(item => item.name)\n    .reduce((acc, curItem) => acc + ',' + curItem)}`;\n\n  fetch(`${baseUrl}?maxList=${maxList}&terms=${searchString}${df}`)\n  .then(response => response.json().then(result => {\n    let data = result[3];\n    if (fieldSet === FIELD_SETS.ALL_FIELDS) {\n      data = mapDataToFields(data[0], fieldSet);\n    }\n\n    resolve(data);\n  }))\n  .catch(error => reject(error))\n});\n\nconst fetchCardData = (searchString, maxList) =>\n  fetchData(searchString, FIELD_SETS.ALL_FIELDS, maxList);\n\nconst fetchListData = (searchString, maxList) =>\n  fetchData(searchString, FIELD_SETS.BRIEF_SET, maxList);\n\nexport {\n  fetchCardData,\n  fetchListData\n};\n","import './Grid.css';\nimport { Link } from \"react-router-dom\";\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchListData } from '../dataFetchService';\n\nfunction Grid() {\n  const params = useParams();\n  const [data, setData] = useState();\n  useEffect(() => {\n    const maxList = 10;\n    let isCancelled = false;\n    fetchListData(params.text, maxList).then(result => {\n      if (!isCancelled) {\n        setData(result);\n      }\n    });\n\n    return () => {\n      isCancelled = true;\n    };\n  });\n\n  return !data ? null : (\n    <div className=\"grid\">\n        <div className=\"grid-content\">\n          {data.map((item, i) => {\n            const [npi, providerType, gender, name, addrPractice, country] = item;\n            return (\n              <div key={i} className=\"grid-gridCard\">\n                <div>{providerType}</div>\n                <div className=\"grid-gridCard-primaryColumn\">\n                  <Link to={`/card/${npi}`}>{name}</Link>\n                  <div className=\"grid-gridCard-primaryColumn-rightText\">{gender === 'F' ? 'Female' : 'Male'}</div>\n                </div>\n                <div>{country}, {addrPractice}</div>\n              </div>\n            );\n          })}\n        </div>\n    </div>\n  );\n}\n\nexport default Grid;\n","import '../App.css';\nimport { useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport './Search.css'\n\nfunction Search() {\n  const params = useParams();\n  const [searchString, setSearchString] = useState(params.text ? params.text : '');\n  const history = useHistory();\n  return (\n    <div className=\"search\">\n      <input value={searchString} onChange={e => {\n        setSearchString(e.target.value);\n      }} onKeyDown={e => {\n        if (e.key === 'Enter') {\n          history.push(`/search/${searchString}`);\n        }\n      }} />\n      <button disabled={!searchString} onClick={() => {\n        history.push(`/search/${searchString}`);\n      }}>Go</button>\n    </div>\n  );\n}\n\nexport default Search;\n","import './Card.css';\nimport { useParams } from 'react-router-dom';\nimport { fetchCardData } from '../dataFetchService';\nimport { useState, useEffect } from 'react';\n\nfunction Card() {\n  const params = useParams();\n  const [data, setData] = useState('');\n  useEffect(() => {\n    let isCancelled = false;\n    fetchCardData(params.npi).then(result => {\n      if (!isCancelled) {\n        setData(result.filter(item => item.value[0] !== '{'));\n      }\n    });\n\n    return () => {\n      isCancelled = true;\n    };\n  });\n\n  if (!data) {\n    return (\n      <div className=\"card\">\n        loading...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        {data.map((item, index) => {\n          return (\n            <div className={\"card-Card\"} key={index}>\n              <div className={\"card-Card-fieldCaption\"}>{item.caption}</div>\n              {item.value ? item.value : 'N/A'}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","\nimport './App.css';\nimport Grid from './components/Grid';\nimport SearchPage from './components/Search'\nimport Card from './components/Card'\nimport { useState } from 'react';\nimport {\n  HashRouter  as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const renderMainPage = path => (\n    <>\n      <SearchPage onLoad={data => {\n        setData(data);\n      }}/>\n      <Grid data={data}/>\n    </>\n  );\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/card/:npi\">\n            <Card />\n          </Route>\n          <Route path={\"/search/:text\"}>\n            {renderMainPage()}\n          </Route>\n          <Route path={\"/\"}>\n            {renderMainPage()}\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}